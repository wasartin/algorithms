package main.java;

public class Intervals {

	public Intervals() {
		
	}
	
	/**
	 * Adds the interval with left endpoint a and right
	 * endpoint b to the collection of intervals. Each newly inserted interval must be assigned an
	 * ID. The IDs should be consecutive; that is, the ID of the interval inserted on the ith call of
	 * this method should be i. For example if intervalInsert is called successively to insert
	 * intervals [5, 7], [4, 9], [1, 8], then the IDs of these intervals should be 1, 2, 3, respectively.
	 * These IDs are permanent for the respective intervals. Keep track of the IDs, as multiple
	 * intervals that have the same endpoints on both sides can be added. intervalInsert
	 * should run in O(log n) time
	 * @param a
	 * @param b
	 */
	public void intervalInsert(int a, int b) {
		//TODO
		
	}
	
	/**
	 * boolean intervalDelete(int intervalID): Deletes the interval whose ID (generated by intervalInsert) is intervalID. Returns true if deletion was successful. This
	 * method should run in O(log n) time.
	 * Note. The intervalDelete method is optional; that is, you are not required
	 * to implement it. However, your code must provide an intervalDelete method
	 * even if you choose not to implement interval deletion. If you do not implement
	 * deletion, the intervalDelete method should consist of just one line that returns
	 * false.
	 * @param intervalID
	 * @return
	 */
	public boolean intervalDelete(int intervalID) {
		//TODO
		return false;
	}
	
	/**
	 * Finds the endpoint that has maximum overlap and returns its value. This
	 * method should run in constant time.
	 * @return
	 */
	public int findPOM() {
		return -1;
	}
	
	/**
	 * Returns the red-black tree used, which is an object of type RBTree.
	 * @return
	 */
	public RBTree getRBTree() {
		return null;
	}
}
